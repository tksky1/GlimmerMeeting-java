---
apiVersion: v1
kind: Namespace
metadata:
  name: glimmermeeting
  labels:
    app: glimmermeeting
---
apiVersion: v1
kind: Endpoints
metadata:
  name: mysql-glimmerMeeting
  namespace: glimmermeeting
subsets:
  - addresses:
      - ip: 192.168.79.11
    ports:
      - port: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: glimmermeeting
spec:
  clusterIP: 10.96.2.22 #固定clusterIP
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
---
apiVersion: v1
kind: Deployment
metadata:
  name: backend
  namespace: glimmermeeting
  labels:
    - app: glimmermeeting
spec:
  selector:
    matchLabels:
      app: glimmermeeting
  replicas: 2
  template:
    metadata:
      labels:
        app: glimmermeeting
    spec:
      containers:
        - name: backend
          image: backend
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 2023  #容器需要监听的端口号
              hostPort: 2023    #选填，容器所在主机需要监听的端口号，默认与Container相同
              protocol: TCP     #选填，端口协议，支持TCP和UDP，默认TCP
          resources:       #资源限制和请求的设置
            limits:      #资源限制的设置
              cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数
              memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数
            requests:      #资源请求的设置
              cpu: string    #Cpu请求，容器启动的初始可用数量
              memory: string     #内存清楚，容器启动的初始可用数量
          volumeMounts:    #挂载到容器内部的存储卷配置
            - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名
              mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符
              readOnly: boolean    #是否为只读模式
          livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可
            exec:      #对Pod容器内检查方式设置为exec方式
              command: [string]  #exec方式需要制定的命令或脚本
            httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port
              path: string
              port: number
              host: string
              scheme: string
              HttpHeaders:
                - name: string
                  value: string
            tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式
              port: number
            initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒
            timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒
            periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次
            successThreshold: 0
            failureThreshold: 0
            securityContext:
              privileged:false
          #Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod
          restartPolicy: [Always | Never | OnFailure]
          nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定
          imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定
            - name: string
          hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络
          volumes:       #在该pod上定义共享存储卷列表
            - name: string     #共享存储卷名称 （volumes类型有很多种）
              emptyDir: {}     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值
              hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录
                path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录
            - name: string     #共享存储卷名称
              secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部
                scretname: string
                items:
                  - key: string     #选择secrets定义的某个key
                    path: string    #文件内容路径
            - name: string     #共享存储卷名称
              configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部
                name: string
                items:
                  - key: string     #选择configmap定义的某个key
                    path: string     #文件内容路径
            - name: string     #共享存储卷名称
              persistentVolumeClaim:
                claimName: string     #类型为PVC的持久化存储卷
